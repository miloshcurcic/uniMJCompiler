

package rs.ac.bg.etf.pp1;

import java.util.*;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.test.*;
import rs.ac.bg.etf.pp1.error.*;

parser code {:
    private Logger log = Logger.getLogger(getClass());
    private List<CompilerError> errorList = new ArrayList<>();

    // This method should be called whenever a non-recoverable error occurs. Overriding method to avoid throwing exception here.
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        // Report error
        report_error(message, info);

        // End parsing
        done_parsing();
    }

    // This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error detected", cur_token);
    }

    // This method is called by the parser if it is unable to recover from a syntax error.
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error detected", cur_token);
    }

    // This method should be called whenever an error message is to be issued.
    public void report_error(String message, Object info) {
   	    StringBuilder errorMessage = new StringBuilder(message);
   	    int line = 0;

   	    if (info instanceof Symbol) {
   	        line = ((Symbol)info).left;
            errorMessage.append (" on position ").append(line);
        }

        errorMessage.append(info);

        errorList.add(new SyntaxError(line, errorMessage.toString()));

        log.error(errorMessage.toString());
    }

    public boolean isErrorDetected() {
        return !errorList.isEmpty();
    }

    public List<CompilerError> getErrorList() {
        return errorList;
    }
:}

init with {:
:}

scan with {:
	Symbol s = this.getScanner().next_token();

	return s;
:}

terminal
	PROGRAM,
	CLASS,
	CONST,
	IF,
	ELSE,
	DO,
	WHILE,
	BREAK,
	SWITCH,
	YIELD,
	DEFAULT,
	NEW,
	PRINT,
	READ,
	RETURN,
	VOID,
	EXTENDS,
	CONTINUE,
	CASE
;

terminal
	PLUS,
	MINUS,
	MULTIPLY,
	DIVIDE,
	MODULO,
	EQUALS,
	PPLUS,
	MMINUS
;

terminal
 	CEQUALS,
	CNEQUALS,
	GREATER,
	GEQUALS,
	LESS,
	LEQUALS
;

terminal
	AND,
	OR
;

terminal
	SEMICOLON,
	COLON,
	COMMA,
	DOT,
	LPAREN,
	RPAREN,
	LBRACE,
	RBRACE,
	LBRACKET,
	RBRACKET
;

terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOL ;
terminal Character CHAR ;

nonterminal Program Program;
nonterminal
    ProgramName ProgramName;
nonterminal
    DataDecls DataDecls;
nonterminal
    DataDecl DataDecl;
nonterminal
	ConstDecl ConstDecl;
nonterminal
	ConstDeclType ConstDeclType;
nonterminal
    ConstNameValuePairs ConstNameValuePairs;
nonterminal
	ConstNameValuePair ConstNameValuePair;
nonterminal
	VarDecls VarDecls;
nonterminal
	VarDecl VarDecl;
nonterminal
	VarDeclType VarDeclType;
nonterminal
    VarIdents VarIdents;
nonterminal
	VarIdent VarIdent;
nonterminal
	ClassDecl ClassDecl;
nonterminal
	ClassName ClassName;
nonterminal
	BaseClassName BaseClassName;
nonterminal
	ExtendedClassSplitter ExtendedClassSplitter;
nonterminal
	ClassMethodDecls ClassMethodDecls;
nonterminal
	MethodDecls MethodDecls;
nonterminal
	MethodDecl MethodDecl;
nonterminal
	MethodFormPars MethodFormPars;
nonterminal
	MethodStatements MethodStatements;
nonterminal
	FormPars FormPars;
nonterminal
	FormPar FormPar;
nonterminal
	Statements Statements;
nonterminal
	Statement Statement;
nonterminal
	BracedStatement BracedStatement;
nonterminal
	BracedStatements BracedStatements;
nonterminal
	SingleStatement SingleStatement;
nonterminal
	MatchedStatement MatchedStatement;
nonterminal
	IfCond IfCond;
nonterminal
	DoWhileCondition DoWhileCondition;
nonterminal
	PrintStatementAdditionalParam PrintStatementAdditionalParam;
nonterminal
	DesignatorStatement DesignatorStatement;
nonterminal
	ReturnExpr ReturnExpr;
nonterminal
	YieldExpr YieldExpr;
nonterminal
	DoWhileStatementStart DoWhileStatementStart;
nonterminal
	DoWhileStatementEnd DoWhileStatementEnd;
nonterminal
	IfStatementStart IfStatementStart;
nonterminal
	IfStatementEnd IfStatementEnd;
nonterminal
	IfConditionStart IfConditionStart;
nonterminal
	IfConditionEnd IfConditionEnd;
nonterminal
	DoWhileConditionStart DoWhileConditionStart;
nonterminal
	DoWhileConditionEnd DoWhileConditionEnd;
nonterminal
	OrConditionStart OrConditionStart;
nonterminal
	ElseStatementStart ElseStatementStart;
nonterminal
	ElseStatementEnd ElseStatementEnd;
nonterminal
	SwitchCases SwitchCases;
nonterminal
	SwitchDefaultCase SwitchDefaultCase;
nonterminal
	SwitchStatementExpression SwitchStatementExpression;
nonterminal
	SwitchCase SwitchCase;
nonterminal
	SwitchExpressionStart SwitchExpressionStart;
nonterminal
	SwitchDefaultCaseStart SwitchDefaultCaseStart;
nonterminal
	SwitchCondition SwitchCondition;
nonterminal
	ActPars ActPars;
nonterminal
	ActPar ActPar;
nonterminal
	FuncCallActPars FuncCallActPars;
nonterminal
	Condition Condition;
nonterminal
	CondTerm CondTerm;
nonterminal
	CondFact CondFact;
nonterminal
	Assignop Assignop;
nonterminal
	Relop Relop;
nonterminal
	Addop Addop;
nonterminal
	Mulop Mulop
;

nonterminal rs.etf.pp1.symboltable.concepts.Struct
    Type,
    ClassType,
    Factor,
    Term,
    TermExpr,
    Expr,
    FunctionCall
;

nonterminal rs.etf.pp1.symboltable.concepts.Obj
    Designator,
    FunctionCallDesignator,
    MethodTypeNamePair
;

precedence left ELSE ;

Program ::= (Program) PROGRAM ProgramName:P1 DataDecls:D2 LBRACE MethodDecls:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :} ;

ProgramName ::= (ProgramName) IDENT:name {: RESULT=new ProgramName(name); RESULT.setLine(nameleft); :} ;

DataDecls ::= (DataDeclListElement) DataDecls:D1 DataDecl:D2 {: RESULT=new DataDeclListElement(D1, D2); RESULT.setLine(D1left); :}
        | (EmptyDataDeclListHead) {: RESULT=new EmptyDataDeclListHead(); :}
;

DataDecl ::= (ConstDataDecl) ConstDecl:C1 {: RESULT=new ConstDataDecl(C1); RESULT.setLine(C1left); :}
        | (VarDataDecl) VarDecl:V1 {: RESULT=new VarDataDecl(V1); RESULT.setLine(V1left); :}
        | (ClassDataDecl) ClassDecl:C1 {: RESULT=new ClassDataDecl(C1); RESULT.setLine(C1left); :}
;

ConstDecl ::= (ConstDecl) CONST ConstDeclType:C1 ConstNameValuePairs:C2 SEMICOLON {: RESULT=new ConstDecl(C1, C2); RESULT.setLine(C1left); :} ;

ConstDeclType ::= (ConstDeclType) Type:T1 {: RESULT=new ConstDeclType(T1); RESULT.setLine(T1left); :} ;

ConstNameValuePairs ::= (ConstNameValuePairListElement) ConstNameValuePairs:C1 COMMA ConstNameValuePair:C2 {: RESULT=new ConstNameValuePairListElement(C1, C2); RESULT.setLine(C1left); :}
       | (ConstNameValuePairListHead) ConstNameValuePair:C1 {: RESULT=new ConstNameValuePairListHead(C1); RESULT.setLine(C1left); :}
;

ConstNameValuePair ::= (NumberConstNameValuePair) IDENT:name EQUALS NUMBER:value {: RESULT=new NumberConstNameValuePair(name, value); RESULT.setLine(nameleft); :}
                   | (CharConstNameValuePair) IDENT:name EQUALS CHAR:value {: RESULT=new CharConstNameValuePair(name, value); RESULT.setLine(nameleft); :}
                   | (BoolConstNameValuePair) IDENT:name EQUALS BOOL:value {: RESULT=new BoolConstNameValuePair(name, value); RESULT.setLine(nameleft); :}
;

VarDecls ::= (VarDeclListElement) VarDecls:V1 VarDecl:V2 {: RESULT=new VarDeclListElement(V1, V2); RESULT.setLine(V1left); :}
   | (EmptyVarDeclList) {: RESULT=new EmptyVarDeclList(); :}
;

VarDecl ::= (VariableDeclaration) VarDeclType:V1 VarIdents:V2 SEMICOLON {: RESULT=new VariableDeclaration(V1, V2); RESULT.setLine(V1left); :}
    | (VariableDeclarationError) error SEMICOLON {: RESULT=new VariableDeclarationError(); :}
;

VarDeclType ::= (VarDeclType) Type:T1 {: RESULT=new VarDeclType(T1); RESULT.setLine(T1left); :} ;

VarIdents ::= (VarIdentListElement) VarIdents:V1 COMMA VarIdent:V2 {: RESULT=new VarIdentListElement(V1, V2); RESULT.setLine(V1left); :}
       | (VarIdentListHead) VarIdent:V1 {: RESULT=new VarIdentListHead(V1); RESULT.setLine(V1left); :}
;

VarIdent ::= (ScalarVarIdent) IDENT:name {: RESULT=new ScalarVarIdent(name); RESULT.setLine(nameleft); :}
       | (ArrayVarIdent) IDENT:name LBRACKET RBRACKET {: RESULT=new ArrayVarIdent(name); RESULT.setLine(nameleft); :}
       | (VarIdentError) error {: RESULT=new VarIdentError(); :}
;

ClassDecl ::= (ExtendedClassDeclaration) CLASS ClassName:C1 EXTENDS BaseClassName:B2 LBRACE VarDecls:V3 ExtendedClassSplitter:E4 ClassMethodDecls:C5 RBRACE {: RESULT=new ExtendedClassDeclaration(C1, B2, V3, E4, C5); RESULT.setLine(C1left); :}
       | (ClassDeclaration) CLASS ClassName:C1 LBRACE VarDecls:V2 ClassMethodDecls:C3 RBRACE {: RESULT=new ClassDeclaration(C1, V2, C3); RESULT.setLine(C1left); :}
;

ClassMethodDecls ::= (ClassMethodDeclarations) LBRACE MethodDecls:M1 RBRACE {: RESULT=new ClassMethodDeclarations(M1); RESULT.setLine(M1left); :}
       | (NoClassMethodDeclarations) {: RESULT=new NoClassMethodDeclarations(); :}
;

ClassName ::= (ClassName) ClassType:C1 {: RESULT=new ClassName(C1); RESULT.setLine(C1left); :} ;

ClassType ::= (ClassType) IDENT:name {: RESULT=new ClassType(name); RESULT.setLine(nameleft); :} ;

BaseClassName ::= (BaseClassName) Type:T1 {: RESULT=new BaseClassName(T1); RESULT.setLine(T1left); :} ;

ExtendedClassSplitter ::= (ExtendedClassSplitter) {: RESULT=new ExtendedClassSplitter(); :} ;

MethodDecls ::= (MethodDeclarationListElement) MethodDecls:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationListElement(M1, M2); RESULT.setLine(M1left); :}
                | (EmptyMethodDeclarationListHead) {: RESULT=new EmptyMethodDeclarationListHead(); :}
;

MethodDecl ::= (MethodDeclaration) MethodTypeNamePair:M1 LPAREN MethodFormPars:M2 RPAREN VarDecls:V3 LBRACE MethodStatements:M4 RBRACE {: RESULT=new MethodDeclaration(M1, M2, V3, M4); RESULT.setLine(M1left); :} ;

MethodStatements ::= (MethodStatements) Statements:S1 {: RESULT=new MethodStatements(S1); RESULT.setLine(S1left); :} ;

MethodFormPars ::= (MethodFormalParameters) FormPars:F1 {: RESULT=new MethodFormalParameters(F1); RESULT.setLine(F1left); :}
       | (NoMethodFormalParameters) {: RESULT=new NoMethodFormalParameters(); :}
;

MethodTypeNamePair ::= (TypeMethodTypeNamePair) Type:T1 IDENT:name {: RESULT=new TypeMethodTypeNamePair(T1, name); RESULT.setLine(T1left); :}
            | (VoidMethodTypeNamePair) VOID IDENT:name {: RESULT=new VoidMethodTypeNamePair(name); RESULT.setLine(nameleft); :}
;

FormPars ::= (FormalParametersListElement) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormalParametersListElement(F1, F2); RESULT.setLine(F1left); :}
        | (FormParametersListHead) FormPar:F1 {: RESULT=new FormParametersListHead(F1); RESULT.setLine(F1left); :}
;

FormPar ::= (ScalarFormalParameter) Type:T1 IDENT:name {: RESULT=new ScalarFormalParameter(T1, name); RESULT.setLine(T1left); :}
            | (ArrayFormalParameter) Type:T1 IDENT:name LBRACKET RBRACKET {: RESULT=new ArrayFormalParameter(T1, name); RESULT.setLine(T1left); :}
            | (FormalParameterError) error {: RESULT=new FormalParameterError(); :}
;

Type ::= (Type) IDENT:name {: RESULT=new Type(name); RESULT.setLine(nameleft); :} ;

Statements ::= (StatementListElement) Statements:S1 Statement:S2 {: RESULT=new StatementListElement(S1, S2); RESULT.setLine(S1left); :}
        | (EmptyStatementListHead) {: RESULT=new EmptyStatementListHead(); :}
;

Statement ::= (BracedStatementType) BracedStatement:B1 {: RESULT=new BracedStatementType(B1); RESULT.setLine(B1left); :}
        | (SingleStatementType) SingleStatement:S1 {: RESULT=new SingleStatementType(S1); RESULT.setLine(S1left); :}
;

BracedStatement ::= (BracedStatement) LBRACE BracedStatements:B1 RBRACE {: RESULT=new BracedStatement(B1); RESULT.setLine(B1left); :} ;

BracedStatements ::= (BracedStatementListElement) BracedStatements:B1 SingleStatement:S2 {: RESULT=new BracedStatementListElement(B1, S2); RESULT.setLine(B1left); :}
        | (EmptyBracedStatementListHead) {: RESULT=new EmptyBracedStatementListHead(); :}
;

SingleStatement ::= (SingleMatchedStatement) MatchedStatement:M1 {: RESULT=new SingleMatchedStatement(M1); RESULT.setLine(M1left); :} ;

MatchedStatement ::= (MatchedAssignmentStatement) DesignatorStatement:D1 SEMICOLON {: RESULT=new MatchedAssignmentStatement(D1); RESULT.setLine(D1left); :}
            | (MatchedIfStatement) IF LPAREN IfCond:I1 RPAREN IfStatementStart:I2 Statement:S3 IfStatementEnd:I4 {: RESULT=new MatchedIfStatement(I1, I2, S3, I4); RESULT.setLine(I1left); :}
            | (MatchedIfElseStatement) IF LPAREN IfCond:I1 RPAREN IfStatementStart:I2 Statement:S3 IfStatementEnd:I4 ELSE ElseStatementStart:E5 Statement:S6 ElseStatementEnd:E7 {: RESULT=new MatchedIfElseStatement(I1, I2, S3, I4, E5, S6, E7); RESULT.setLine(I1left); :}
            | (MatchedDoWhileStatement) DO DoWhileStatementStart:D1 Statement:S2 WHILE LPAREN DoWhileCondition:D3 RPAREN DoWhileStatementEnd:D4 SEMICOLON {: RESULT=new MatchedDoWhileStatement(D1, S2, D3, D4); RESULT.setLine(D1left); :}
            | (MatchedBreakStatement) BREAK SEMICOLON {: RESULT=new MatchedBreakStatement(); :}
            | (MatchedYieldStatement) YIELD YieldExpr:Y1 SEMICOLON {: RESULT=new MatchedYieldStatement(Y1); RESULT.setLine(Y1left); :}
            | (MatchedContinueStatement) CONTINUE SEMICOLON {: RESULT=new MatchedContinueStatement(); :}
            | (MatchedReturnStatement) RETURN ReturnExpr:R1 SEMICOLON {: RESULT=new MatchedReturnStatement(R1); RESULT.setLine(R1left); :}
            | (MatchedReadStatement) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new MatchedReadStatement(D1); RESULT.setLine(D1left); :}
            | (MatchedPrintStatement) PRINT LPAREN Expr:E1 PrintStatementAdditionalParam:P2 RPAREN SEMICOLON {: RESULT=new MatchedPrintStatement(E1, P2); RESULT.setLine(E1left); :}
;

IfStatementStart ::= (IfStatementStart) {: RESULT=new IfStatementStart(); :} ;

IfStatementEnd ::= (IfStatementEnd) {: RESULT=new IfStatementEnd(); :} ;

ElseStatementStart ::= (ElseStatementStart) {: RESULT=new ElseStatementStart(); :} ;

ElseStatementEnd ::= (ElseStatementEnd) {: RESULT=new ElseStatementEnd(); :} ;

IfCond ::= (IfCondition) IfConditionStart:I1 Condition:C2 IfConditionEnd:I3 {: RESULT=new IfCondition(I1, C2, I3); RESULT.setLine(I1left); :}
    | (IfConditionError) error {: RESULT=new IfConditionError(); :}
;

IfConditionStart ::= (IfConditionStart) {: RESULT=new IfConditionStart(); :} ;

IfConditionEnd ::= (IfConditionEnd) {: RESULT=new IfConditionEnd(); :} ;

DoWhileCondition ::= (DoWhileCondition) DoWhileConditionStart:D1 Condition:C2 DoWhileConditionEnd:D3 {: RESULT=new DoWhileCondition(D1, C2, D3); RESULT.setLine(D1left); :};

DoWhileStatementStart ::= (DoWhileStatementStart) {: RESULT=new DoWhileStatementStart(); :} ;

DoWhileStatementEnd ::= (DoWhileStatementEnd) {: RESULT=new DoWhileStatementEnd(); :} ;

DoWhileConditionStart ::= (DoWhileConditionStart) {: RESULT=new DoWhileConditionStart(); :} ;

DoWhileConditionEnd ::= (DoWhileConditionEnd) {: RESULT=new DoWhileConditionEnd(); :} ;

PrintStatementAdditionalParam ::= (PrintStatementAdditionalParameter) COMMA NUMBER:N1 {: RESULT=new PrintStatementAdditionalParameter(N1); RESULT.setLine(N1left); :}
                           | (NoPrintStatementAdditionalParameter) {: RESULT=new NoPrintStatementAdditionalParameter(); :}
;

ReturnExpr ::= (ReturnExpression) Expr:E1 {: RESULT=new ReturnExpression(E1); RESULT.setLine(E1left); :}
           | (NoReturnExpression) {: RESULT=new NoReturnExpression(); :}
;

YieldExpr ::= (YieldExpression) Expr:E1 {: RESULT=new YieldExpression(E1); RESULT.setLine(E1left); :} ;

SwitchStatementExpression ::= (SwitchStatementExpression) Expr:E1 {: RESULT=new SwitchStatementExpression(E1); RESULT.setLine(E1left); :} ;

SwitchCases ::= (SwitchCaseListElement) SwitchCases:S1 SwitchCase:S2 {: RESULT=new SwitchCaseListElement(S1, S2); RESULT.setLine(S1left); :}
   | (EmptySwitchCaseListHead) {: RESULT=new EmptySwitchCaseListHead(); :}
;

SwitchCase ::= (SwitchCase) SwitchCondition:S1 Statements:S2 {: RESULT=new SwitchCase(S1, S2); RESULT.setLine(S1left); :} ;

SwitchCondition ::= (SwitchCondition) CASE NUMBER:number COLON {: RESULT=new SwitchCondition(number); RESULT.setLine(numberleft); :} ;

DesignatorStatement ::= (AssignmentDesignatorStatement) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignmentDesignatorStatement(D1, A2, E3); RESULT.setLine(D1left); :}
                    | (FuncCallDesignatorStatement) FunctionCall:F1 {: RESULT=new FuncCallDesignatorStatement(F1); RESULT.setLine(F1left); :}
                    | (PostIncDesignatorStatement) Designator:D1 PPLUS {: RESULT=new PostIncDesignatorStatement(D1); RESULT.setLine(D1left); :}
                    | (PostDecDesignatorStatement) Designator:D1 MMINUS {: RESULT=new PostDecDesignatorStatement(D1); RESULT.setLine(D1left); :}
                    // ToDo: Does this work
                    | (AssignmentError) error Assignop:A1 error {: RESULT=new AssignmentError(A1); RESULT.setLine(A1left); :}
;

FunctionCall ::= (FunctionCall) FunctionCallDesignator:F1 LPAREN FuncCallActPars:F2 RPAREN {: RESULT=new FunctionCall(F1, F2); RESULT.setLine(F1left); :} ;

FunctionCallDesignator ::= (FunctionCallDesignator) Designator:D1 {: RESULT=new FunctionCallDesignator(D1); RESULT.setLine(D1left); :} ;

FuncCallActPars ::= (FunctionCallActualParameters) ActPars:A1 {: RESULT=new FunctionCallActualParameters(A1); RESULT.setLine(A1left); :}
       | (NoFunctionCallActualParameters) {: RESULT=new NoFunctionCallActualParameters(); :}
;

ActPars ::= (ActualParametersListElement) ActPars:A1 COMMA ActPar:A2 {: RESULT=new ActualParametersListElement(A1, A2); RESULT.setLine(A1left); :}
        | (ActualParametersListHead) ActPar:A1 {: RESULT=new ActualParametersListHead(A1); RESULT.setLine(A1left); :}
;

ActPar ::= (ActualParameter) Expr:E1 {: RESULT=new ActualParameter(E1); RESULT.setLine(E1left); :} ;

Condition ::= (ConditionListElement) Condition:C1 OrConditionStart:O2 OR CondTerm:C3 {: RESULT=new ConditionListElement(C1, O2, C3); RESULT.setLine(C1left); :}
        | (ConditionListHead) CondTerm:C1 {: RESULT=new ConditionListHead(C1); RESULT.setLine(C1left); :}
;

OrConditionStart ::= (OrConditionStart) {: RESULT=new OrConditionStart(); :} ;

CondTerm ::= (CondTermListElement) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermListElement(C1, C2); RESULT.setLine(C1left); :}
        | (CondTermListHead) CondFact:C1 {: RESULT=new CondTermListHead(C1); RESULT.setLine(C1left); :}
;

CondFact ::= (RelationalCondFact) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new RelationalCondFact(E1, R2, E3); RESULT.setLine(E1left); :}
    | (SingleCondFact) Expr:E1 {: RESULT=new SingleCondFact(E1); RESULT.setLine(E1left); :}
;

Expr ::= (TermExpression) TermExpr:T1 {: RESULT=new TermExpression(T1); RESULT.setLine(T1left); :}
   | (SwitchExpression) SwitchExpressionStart:S1 SWITCH LPAREN SwitchStatementExpression:S2 RPAREN LBRACE SwitchCases:S3 SwitchDefaultCase:S4 RBRACE {: RESULT=new SwitchExpression(S1, S2, S3, S4); RESULT.setLine(S1left); :}
;

SwitchExpressionStart ::= (SwitchExpressionStart) {: RESULT=new SwitchExpressionStart(); :} ;

SwitchDefaultCase ::= (SwitchDefaultCase) DEFAULT SwitchDefaultCaseStart:S1 COLON Statements:S2 {: RESULT=new SwitchDefaultCase(S1, S2); RESULT.setLine(S1left); :} ;

SwitchDefaultCaseStart ::= (SwitchDefaultCaseStart) {: RESULT=new SwitchDefaultCaseStart(); :} ;

TermExpr ::= (TermExprListElement) TermExpr:T1 Addop:A2 Term:T3 {: RESULT=new TermExprListElement(T1, A2, T3); RESULT.setLine(T1left); :}
        | (TermExprListHead) Term:T1 {: RESULT=new TermExprListHead(T1); RESULT.setLine(T1left); :}
        | (NegTermExprListHead) MINUS Term:T1 {: RESULT=new NegTermExprListHead(T1); RESULT.setLine(T1left); :}
;

Term ::= (TermListElement) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermListElement(T1, M2, F3); RESULT.setLine(T1left); :}
    | (TermListHead) Factor:F1 {: RESULT=new TermListHead(F1); RESULT.setLine(F1left); :}
;

Factor ::= (VarFactor) Designator:D1 {: RESULT=new VarFactor(D1); RESULT.setLine(D1left); :}
        | (FunctionCallResultFactor) FunctionCall:F1 {: RESULT=new FunctionCallResultFactor(F1); RESULT.setLine(F1left); :}
        | (NumConstFactor) NUMBER:N1 {: RESULT=new NumConstFactor(N1); RESULT.setLine(N1left); :}
        | (CharConstFactor) CHAR:C1 {: RESULT=new CharConstFactor(C1); RESULT.setLine(C1left); :}
        | (BoolConstFactor) BOOL:B1 {: RESULT=new BoolConstFactor(B1); RESULT.setLine(B1left); :}
        | (NewObjectFactor) NEW Type:T1 {: RESULT=new NewObjectFactor(T1); RESULT.setLine(T1left); :}
        | (NewArrayObjectFactor) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewArrayObjectFactor(T1, E2); RESULT.setLine(T1left); :}
        | (ExprResultFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprResultFactor(E1); RESULT.setLine(E1left); :}
;

Designator ::= (ScalarDesignator) IDENT:name {: RESULT=new ScalarDesignator(name); RESULT.setLine(nameleft); :}
            | (ObjectAccessDesignator) Designator:D1 DOT IDENT:fieldName {: RESULT=new ObjectAccessDesignator(D1, fieldName); RESULT.setLine(D1left); :}
            | (ArrayAccessDesignator) Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new ArrayAccessDesignator(D1, E2); RESULT.setLine(D1left); :}
;

Assignop ::= (Assignop) EQUALS {: RESULT=new Assignop(); :} ;

Relop ::= (RelopCEquals) CEQUALS {: RESULT=new RelopCEquals(); :}
        | (RelopCNEquals) CNEQUALS {: RESULT=new RelopCNEquals(); :}
        | (RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
        | (RelopGEquals) GEQUALS {: RESULT=new RelopGEquals(); :}
        | (RelopLess) LESS {: RESULT=new RelopLess(); :}
        | (RelopLEquals) LEQUALS {: RESULT=new RelopLEquals(); :}
;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
        | (AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
;

Mulop ::= (MulopMultiply) MULTIPLY {: RESULT=new MulopMultiply(); :}
        | (MulopDivide) DIVIDE {: RESULT=new MulopDivide(); :}
        | (MulopModulo) MODULO {: RESULT=new MulopModulo(); :}
;