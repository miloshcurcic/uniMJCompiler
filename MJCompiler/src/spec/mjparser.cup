

package rs.ac.bg.etf.pp1;

import java.util.*;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.test.*;
import rs.ac.bg.etf.pp1.error.*;

parser code {:
    private Logger log = Logger.getLogger(getClass());
    private List<CompilerError> errorList = new ArrayList<>();

    // This method should be called whenever a non-recoverable error occurs. Overriding method to avoid throwing exception here.
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        // Report error
        report_error(message, info);

        // End parsing
        done_parsing();
    }

    // This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error detected", cur_token);
    }

    // This method is called by the parser if it is unable to recover from a syntax error.
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error detected", cur_token);
    }

    // This method should be called whenever an error message is to be issued.
    public void report_error(String message, Object info) {
   	    StringBuilder errorMessage = new StringBuilder(message);
   	    int line = 0;

   	    if (info instanceof Symbol) {
   	        line = ((Symbol)info).left;
            errorMessage.append (" on position ").append(line);
        }

        errorMessage.append(info);

        errorList.add(new SyntaxError(line, errorMessage.toString()));

        log.error(errorMessage.toString());
    }

    public boolean isErrorDetected() {
        return !errorList.isEmpty();
    }

    public List<CompilerError> getErrorList() {
        return errorList;
    }
:}

init with {:
:}

scan with {:
	Symbol s = this.getScanner().next_token();

	return s;
:}

terminal
	PROGRAM,
	CLASS,
	CONST,
	IF,
	ELSE,
	DO,
	WHILE,
	BREAK,
	SWITCH,
	YIELD,
	DEFAULT,
	NEW,
	PRINT,
	READ,
	RETURN,
	VOID,
	EXTENDS,
	CONTINUE,
	CASE
;

terminal
	PLUS,
	MINUS,
	MULTIPLY,
	DIVIDE,
	MODULO,
	EQUALS,
	PPLUS,
	MMINUS
;

terminal
 	CEQUALS,
	CNEQUALS,
	GREATER,
	GEQUALS,
	LESS,
	LEQUALS
;

terminal
	AND,
	OR
;

terminal
	SEMICOLON,
	COLON,
	COMMA,
	DOT,
	LPAREN,
	RPAREN,
	LBRACE,
	RBRACE,
	LBRACKET,
	RBRACKET
;

terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOL ;
terminal Character CHAR ;

nonterminal Program,
    ProgramName,
    DataDecls,
    DataDecl,
	ConstDecl,
	ConstDeclType,
    ConstNameValuePairs,
	ConstNameValuePair,
	VarDecls,
	VarDecl,
	VarDeclType,
    VarIdents,
	VarIdent,
	ClassDecl,
	ClassName,
	BaseClassName,
	ExtendedClassSplitter,
	ClassMethodDecls,
	MethodDecls,
	MethodDecl,
	MethodFormPars,
	FormPars,
	FormPar,
	Statements,
	Statement,
	BracedStatement,
	BracedStatements,
	SingleStatement,
	MatchedStatement,
	IfCond,
	DoWhileCondition,
	PrintStatementAdditionalParam,
	DesignatorStatement,
	ReturnExpr,
	YieldExpr,
	DoWhileStatementStart,
	DoWhileStatementEnd,
	IfStatementStart,
	IfStatementEnd,
	IfConditionStart,
	IfConditionEnd,
	DoWhileConditionStart,
	DoWhileConditionEnd,
	OrConditionStart,
	ElseStatementStart,
	ElseStatementEnd,
	SwitchCases,
	SwitchDefaultCase,
	SwitchStatementExpression,
	SwitchCase,
	SwitchStatementStart,
	SwitchExpressionStart,
	SwitchDefaultCaseStart,
	SwitchCondition,
	ActPars,
	ActPar,
	FuncCallActPars,
	Condition,
	CondTerm,
	CondFact,
	ExprPrefix,
	Assignop,
	Relop,
	Addop,
	Mulop
;

nonterminal rs.etf.pp1.symboltable.concepts.Struct
    Type,
    ClassType,
    Factor,
    Term,
    TermExpr,
    Expr,
    FunctionCall
;

nonterminal rs.etf.pp1.symboltable.concepts.Obj
    Designator,
    FunctionCallDesignator,
    MethodTypeNamePair
;

precedence left ELSE ;

Program ::= (Program) PROGRAM ProgramName DataDecls LBRACE MethodDecls RBRACE ;

ProgramName ::= (ProgramName) IDENT:name ;

DataDecls ::= (DataDeclListElement) DataDecls DataDecl
        | (EmptyDataDeclListHead)
;

DataDecl ::= (ConstDataDecl) ConstDecl
        | (VarDataDecl) VarDecl
        | (ClassDataDecl) ClassDecl
;

ConstDecl ::= (ConstDecl) CONST ConstDeclType ConstNameValuePairs SEMICOLON ;

ConstDeclType ::= (ConstDeclType) Type ;

ConstNameValuePairs ::= (ConstNameValuePairListElement) ConstNameValuePairs COMMA ConstNameValuePair
       | (ConstNameValuePairListHead) ConstNameValuePair
;

ConstNameValuePair ::= (NumberConstNameValuePair) IDENT:name EQUALS NUMBER:value
                   | (CharConstNameValuePair) IDENT:name EQUALS CHAR:value
                   | (BoolConstNameValuePair) IDENT:name EQUALS BOOL:value
;

VarDecls ::= (VarDeclListElement) VarDecls VarDecl
   | (EmptyVarDeclList)
;

VarDecl ::= (VariableDeclaration) VarDeclType VarIdents SEMICOLON
;

VarDeclType ::= (VarDeclType) Type ;

VarIdents ::= (VarIdentListElement) VarIdents COMMA VarIdent
       | (VarIdentListHead) VarIdent
;

VarIdent ::= (ScalarVarIdent) IDENT:name
       | (ArrayVarIdent) IDENT:name LBRACKET RBRACKET
       | error
;

ClassDecl ::= (ExtendedClassDeclaration) CLASS ClassName EXTENDS BaseClassName LBRACE VarDecls ExtendedClassSplitter ClassMethodDecls RBRACE
       | (ClassDeclaration) CLASS ClassName LBRACE VarDecls ClassMethodDecls RBRACE
;

ClassMethodDecls ::= (ClassMethodDeclarations) LBRACE MethodDecls RBRACE
       | (NoClassMethodDeclarations)
;

ClassName ::= (ClassName) ClassType ;

ClassType ::= (ClassType) IDENT:name ;

BaseClassName ::= (BaseClassName) Type ;

ExtendedClassSplitter ::= (ExtendedClassSplitter) ;

MethodDecls ::= (MethodDeclarationListElement) MethodDecls MethodDecl
                | (EmptyMethodDeclarationListHead)
;

MethodDecl ::= (MethodDeclaration) MethodTypeNamePair LPAREN MethodFormPars RPAREN VarDecls LBRACE Statements RBRACE ;

MethodFormPars ::= (MethodFormalParameters) FormPars
       | (NoMethodFormalParameters)
;

MethodTypeNamePair ::= (TypeMethodTypeNamePair) Type IDENT:name
            | (VoidMethodTypeNamePair) VOID IDENT:name
;

FormPars ::= (FormalParametersListElement) FormPars COMMA FormPar
        | (FormParametersListHead) FormPar
;

FormPar ::= (ScalarFormalParameter) Type IDENT:name
            | (ArrayFormalParameter) Type IDENT:name LBRACKET RBRACKET
            | error
;

Type ::= (Type) IDENT:name ;

Statements ::= (StatementListElement) Statements Statement
        | (EmptyStatementListHead)
;

Statement ::= (BracedStatementType) BracedStatement
        | (SingleStatementType) SingleStatement
;

BracedStatement ::= (BracedStatement) LBRACE BracedStatements RBRACE ;

BracedStatements ::= (BracedStatementListElement) BracedStatements SingleStatement
        | (EmptyBracedStatementListHead)
;

SingleStatement ::= (SingleMatchedStatement) MatchedStatement ;

MatchedStatement ::= (MatchedAssignmentStatement) DesignatorStatement SEMICOLON
            | (MatchedIfStatement) IF LPAREN IfCond RPAREN IfStatementStart Statement IfStatementEnd
            | (MatchedIfElseStatement) IF LPAREN IfCond RPAREN IfStatementStart Statement IfStatementEnd ELSE ElseStatementStart Statement ElseStatementEnd
            | (MatchedDoWhileStatement) DO DoWhileStatementStart Statement WHILE LPAREN DoWhileCondition RPAREN DoWhileStatementEnd SEMICOLON
            | (MatchedSwitchStatement) SwitchStatementStart SWITCH LPAREN SwitchStatementExpression RPAREN LBRACE SwitchCases RBRACE
            | (MatchedBreakStatement) BREAK SEMICOLON
            | (MatchedYieldStatement) YIELD YieldExpr SEMICOLON
            | (MatchedContinueStatement) CONTINUE SEMICOLON
            | (MatchedReturnStatement) RETURN ReturnExpr SEMICOLON
            | (MatchedReadStatement) READ LPAREN Designator RPAREN SEMICOLON
            | (MatchedPrintStatement) PRINT LPAREN Expr PrintStatementAdditionalParam RPAREN SEMICOLON
;

IfStatementStart ::= (IfStatementStart) ;

IfStatementEnd ::= (IfStatementEnd) ;

ElseStatementStart ::= (ElseStatementStart) ;

ElseStatementEnd ::= (ElseStatementEnd) ;

SwitchStatementStart ::= (SwitchStatementStart) ;

IfCond ::= (IfCondition) IfConditionStart Condition IfConditionEnd
    | error
;

IfConditionStart ::= (IfConditionStart) ;

IfConditionEnd ::= (IfConditionEnd) ;

DoWhileCondition ::= (DoWhileCondition) DoWhileConditionStart Condition DoWhileConditionEnd;

DoWhileStatementStart ::= (DoWhileStatementStart) ;

DoWhileStatementEnd ::= (DoWhileStatementEnd) ;

DoWhileConditionStart ::= (DoWhileConditionStart) ;

DoWhileConditionEnd ::= (DoWhileConditionEnd) ;

PrintStatementAdditionalParam ::= (PrintStatementAdditionalParameter) COMMA NUMBER
                           | (NoPrintStatementAdditionalParameter)
;

ReturnExpr ::= (ReturnExpression) Expr
           | (NoReturnExpression)
;

YieldExpr ::= (YieldExpression) Expr ;

SwitchStatementExpression ::= (SwitchStatementExpression) Expr ;

SwitchCases ::= (SwitchCaseListElement) SwitchCases SwitchCase
   | (EmptySwitchCaseListHead)
;

SwitchCase ::= (SwitchCase) SwitchCondition Statements ;

SwitchCondition ::= (SwitchCondition) CASE NUMBER:number COLON ;

DesignatorStatement ::= (AssignmentDesignatorStatement) Designator Assignop Expr
                    | (FuncCallDesignatorStatement) FunctionCall
                    | (PostIncDesignatorStatement) Designator PPLUS
                    | (PostDecDesignatorStatement) Designator MMINUS
                    // ToDo: Does this work
                    | error Assignop error
;

FunctionCall ::= (FunctionCall) FunctionCallDesignator LPAREN FuncCallActPars RPAREN ;

FunctionCallDesignator ::= (FunctionCallDesignator) Designator ;

FuncCallActPars ::= (FunctionCallActualParameters) ActPars
       | (NoFunctionCallActualParameters)
;

ActPars ::= (ActualParametersListElement) ActPars COMMA ActPar
        | (ActualParametersListHead) ActPar
;

ActPar ::= (ActualParameter) Expr ;

Condition ::= (ConditionListElement) Condition OrConditionStart OR CondTerm
        | (ConditionListHead) CondTerm
;

OrConditionStart ::= (OrConditionStart) ;

CondTerm ::= (CondTermListElement) CondTerm AND CondFact
        | (CondTermListHead) CondFact
;

CondFact ::= (RelationalCondFact) Expr Relop Expr
    | (SingleCondFact) Expr
;

Expr ::= (TermExpression) ExprPrefix TermExpr
   | (SwitchExpression) SwitchExpressionStart SWITCH LPAREN SwitchStatementExpression RPAREN LBRACE SwitchCases SwitchDefaultCase RBRACE
;

SwitchExpressionStart ::= (SwitchExpressionStart) ;

SwitchDefaultCase ::= (SwitchDefaultCase) DEFAULT SwitchDefaultCaseStart COLON Statements ;

SwitchDefaultCaseStart ::= (SwitchDefaultCaseStart) ;

ExprPrefix ::= (NegativeExpressionPrefix) MINUS
           | (NoExpressionPrefix)
;

TermExpr ::= (TermExprListElement) TermExpr Addop Term
        | (TermExprListHead) Term
;

Term ::= (TermListElement) Term Mulop Factor
    | (TermListHead) Factor
;

Factor ::= (VarFactor) Designator
        | (FunctionCallResultFactor) FunctionCall
        | (NumConstFactor) NUMBER
        | (CharConstFactor) CHAR
        | (BoolConstFactor) BOOL
        | (NewObjectFactor) NEW Type
        | (NewArrayObjectFactor) NEW Type LBRACKET Expr RBRACKET
        | (ExprResultFactor) LPAREN Expr RPAREN
;

Designator ::= (ScalarDesignator) IDENT:name
            | (ObjectAccessDesignator) Designator DOT IDENT:fieldName
            | (ArrayAccessDesignator) Designator LBRACKET Expr RBRACKET
;

Assignop ::= (Assignop) EQUALS ;

Relop ::= (RelopCEquals) CEQUALS
        | (RelopCNEquals) CNEQUALS
        | (RelopGreater) GREATER
        | (RelopGEquals) GEQUALS
        | (RelopLess) LESS
        | (RelopLEquals) LEQUALS
;

Addop ::= (AddopPlus) PLUS
        | (AddopMinus) MINUS
;

Mulop ::= (MulopMultiply) MULTIPLY
        | (MulopDivide) DIVIDE
        | (MulopModulo) MODULO
;