

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

 terminal
 	PROGRAM,
 	BREAK,
 	CLASS,
 	CONST,
 	IF,
 	ELSE,
 	SWITCH,
 	DO,
 	WHILE,
 	NEW,
 	PRINT,
 	READ,
 	RETURN,
 	VOID,
 	EXTENDS,
 	CONTINUE,
 	CASE
 ;

 terminal
 	PLUS,
 	MINUS,
 	MULTIPLY,
 	DIVIDE,
 	MODULO,
 	EQUALS,
 	PPLUS,
 	MMINUS
 ;

 terminal
  	CEQUALS,
 	CNEQUALS,
 	GREATER,
 	GEQUALS,
 	LESS,
 	LEQUALS
 ;

 terminal
 	AND,
 	OR
 ;

 terminal
 	SEMICOLON,
 	COLON,
 	COMMA,
 	DOT,
 	LPAREN,
 	RPAREN,
 	LBRACE,
 	RBRACE,
 	LBRACKET,
 	RBRACKET,
 	QUESTION
 ;

 terminal Integer NUMBER ;
 terminal String IDENT ;
 terminal Boolean BOOL ;
 terminal Char CHAR ;

nonterminal Program,
	DataDecls,
	ConstDecl,
	ConstNameValuePairs,
	ConstNameValuePair,
	VarDecls,
	VarDecl,
	VarIdents,
	VarIdent,
	ClassDecl,
	MethodDecls,
	MethodDecl,
	MethodTypeNamePair,
	FormPars,
	FormPar,
	Type,
	Statements,
	Statement,
	ParenthesizedStatement,
	ParenthesizedStatements,
	SingleStatement,
	MatchedStatement,
	UnmatchedStatement,
	SwitchCases,
	SwitchCase,
	DesignatorStatement,
	ActPars,
	Condition,
	CondTerm,
	CondFact,
	Expr,
	Expr1,
	ExprPrefix,
	TermExpr,
	Term,
	Factor,
	Designator,
	Assignop,
	Relop,
	Addop,
	Mulop
;

 Program ::= (Program) PROGRAM IDENT DataDecls LBRACE MethodDecls RBRACE ;

 DataDecls ::= (ConstDataDecl) DataDecls ConstDecl
         | (VarDataDecl) DataDecls VarDecl
         | (ClassDataDecl) DataDecls ClassDecl
         | (NoDataDecl)
 ;

 ConstDecl ::= (ConstDecl) CONST Type ConstNameValuePairs SEMICOLON ;

 ConstNameValuePairs ::= (ConstNameValuePairs) ConstNameValuePairs COMMA ConstNameValuePair
        | (ConstNameValuePair) ConstNameValuePair
;

 ConstNameValuePair ::= (NumberConstNameValuePair) IDENT EQUALS NUMBER
                    | (CharConstNameValuePair) IDENT EQUALS CHAR
                    | (BoolConstNameValuePair) IDENT EQUALS BOOL
;

 VarDecls ::= (VarDecls) VarDecls VarDecl
    | (NoVarDEcls)
;

 VarDecl ::= (VarDecl) Type VarIdents SEMICOLON ;

 VarIdents ::= (VarIdents) VarIdents COMMA VarIdent
        | (VarIdent) VarIdent
;

 VarIdent ::= (ScalarVarIdent) IDENT
        | (ArrayVarIdent) IDENT LBRACKET RBRACKET
;

 ClassDecl ::= (ExtendedClassDecl) CLASS IDENT EXTENDS Type LBRACE VarDecls LBRACE MethodDecls RBRACE RBRACE
        | (ExtendedClassNoMethodDecl) CLASS IDENT EXTENDS Type LBRACE VarDecls RBRACE
        | (ClassDecl) CLASS IDENT LBRACE VarDecls LBRACE MethodDecls RBRACE RBRACE
        | (NoMethodClassDecl) CLASS IDENT LBRACE VarDecls RBRACE
 ;

 MethodDecls ::= (MethodDecls) MethodDecls MethodDecl
                 | (NoMethodDecls)
 ;

 MethodDecl ::= (NoParMethodDecl) MethodTypeNamePair LPAREN RPAREN VarDecls LBRACE Statements RBRACE
             | (ParMethodDecl) MethodTypeNamePair LPAREN FormPars RPAREN VarDecls LBRACE Statements RBRACE
 ;

 MethodTypeNamePair ::= (MethodTypeNamePair) Type IDENT
             | (VoidMethodTypeNamePair) VOID IDENT
 ;

 FormPars ::= (FormPars) FormPars COMMA FormPar
         | (FormPar) FormPar
 ;

 FormPar ::= (ScalarFormPar) Type IDENT
             | (ArrayFormPar) Type IDENT LBRACKET RBRACKET
 ;

 Type ::= (Type) IDENT ;

 Statements ::= (Statements) Statements Statement
         | (NoStatements)
 ;

 Statement ::= (ParenthesizedStatement) ParenthesizedStatement
         | (SingleStatement) SingleStatement
 ;

 ParenthesizedStatement ::= (ParenthesizedStatement) LPAREN ParenthesizedStatements RPAREN
 ;

 ParenthesizedStatements ::= (ParenthesizedStatements) ParenthesizedStatements SingleStatement
         | (NoParenthesizedStatements)
 ;

 SingleStatement ::= (SingleMatchedStatement) MatchedStatement
             | (SingleUnmatchedStatement) UnmatchedStatement
 ;

 MatchedStatement ::= (MatchedAssignmentStatement) DesignatorStatement SEMICOLON
             | (MatchedIfStatement) IF LPAREN Condition RPAREN MatchedStatement ELSE MatchedStatement
             | (MatchedDoWhileStatement) DO Statement WHILE LPAREN Condition RPAREN SEMICOLON
             | (MatchedSwitchStatement) SWITCH LPAREN Expr RPAREN LBRACE SwitchCases RBRACE
             | (MatchedBreakStatement) BREAK SEMICOLON
             | (MatchedContinueStatement) CONTINUE SEMICOLON
             | (MatchedExprReturnStatement) RETURN Expr SEMICOLON
             | (MatchedNoExprReturnStatement) RETURN SEMICOLON
             | (MatchedReadStatement) READ LPAREN Designator RPAREN SEMICOLON
             | (MatchedNoParPrintStatement) PRINT LPAREN Expr RPAREN SEMICOLON
             | (MatchedParPrintStatement) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMICOLON
 ;

 UnmatchedStatement ::= (UnmatchedIfStatement) IF LPAREN Condition RPAREN Statement
             | (UnmatchedIfElseStatement) IF LPAREN Condition RPAREN MatchedStatement ELSE UnmatchedStatement
 ;

 SwitchCases ::= (SwitchCases) SwitchCases SwitchCase
             | (NoSwitchCases)
 ;

 SwitchCase ::= CASE NUMBER COLON Statements ;

 DesignatorStatement ::= (AssignmentDesignatorStatement) Designator Assignop Expr
                     | (ParFuncCallDesignatorStatement) Designator LPAREN ActPars RPAREN
                     | (NoParFuncCallDesignatorStatement) Designator LPAREN RPAREN
                     | (PostIncDesignatorStatement) Designator PPLUS
                     | (PostDecDesignatorStatement) Designator MMINUS
 ;

 ActPars ::= (ActPars) ActPars COMMA Expr
         | (ActPar) Expr
 ;

 Condition ::= (OrCondition) Condition OR CondTerm
         | (Condition) CondTerm
 ;

 CondTerm ::= (AndCondTerm) CondTerm AND CondFact
         | (CondTerm) CondFact
 ;

 CondFact ::= (CmpCondFact) Expr Relop Expr
     | (CondFact) Expr
 ;

 Expr ::= (TernaryExpr) Expr1 QUESTION Expr1 COLON Expr1
    | (Expr) Expr1
;

 Expr1 ::= (Expr1) ExprPrefix TermExpr ;

 ExprPrefix ::= (MinusExprPrefix) MINUS
            | (NoExprPrefix)
;

 TermExpr ::= (AddTermExpr) TermExpr Addop Term
         | (TermExpr) Term
 ;

 Term ::= (MulTerm) Term Mulop Factor
     | (Term) Factor
 ;

 Factor ::= (VarFactor) Designator
         | (ParFuncCallResultFactor) Designator LPAREN ActPars RPAREN
         | (NoParFuncCallResultFactor) Designator LPAREN RPAREN
         | (NumConstFactor) NUMBER
         | (CharConstFactor) CHAR
         | (BoolConstFactor) BOOL
         | (NewObjectFactor) NEW Type
         | (NewArrayObjectFactor) NEW Type LBRACKET Expr RBRACKET
         | (ExprResultFactor) LPAREN Expr RPAREN
 ;

 Designator ::= (ScalarDesignator) IDENT
             | (ObjectAccessDesignator) Designator DOT IDENT
             | (ArrayAccessDesignator) Designator LBRACKET Expr RBRACKET
 ;

 Assignop ::= (Assignop) EQUALS ;

 Relop ::= (RelopCEquals) CEQUALS
         | (RelopCNEquals) CNEQUALS
         | (RelopGreater) GREATER
         | (RelopGEquals) GEQUALS
         | (RelopLess) LESS
         | (RelopLEquals) LEQUALS
 ;

 Addop ::= (AddopPlus) PLUS
         | (AddopMinus) MINUS
 ;

 Mulop ::= (MulopMultiply) MULTIPLY
         | (MulopDivide) DIVIDE
         | (MulopModulo) MODULO
 ;


