//Class/Array manipulation tests

program correctSyntax

const bool trueConst = true;
const bool falseConst = false;
const int zeroConst = 0;
const int oneConst = 1;
const int twoConst = 2;
const char mCharConst = 'm';

int intGlobalVar0, intGlobalArrayVar0[];

class BaseClass {
    int firstBaseField;
    int secondBaseField;
    {
        int getFirstBaseFieldMethod() {
            return firstBaseField;
        }

        void setFirstBaseFieldMethod(int firstFormalParam) {
            this.firstBaseField = firstFormalParam;
        }

        int getSecondBaseFieldMethod() {
            return this.secondBaseField;
        }

        void setSecondBaseFieldMethod(int secondBaseField) {
            this.secondBaseField = secondBaseField;
        }
    }
}

class ExtendedClass0 extends BaseClass {
    int firstExtended0Field;

    {
        int mulBaseFirstField() {
            return this.firstBaseField * firstExtended0Field;
        }

        int mulBaseSecondField() {
            return secondBaseField * this.firstExtended0Field;
        }
    }
}

class ExtendedClass1 extends BaseClass {
    int firstExtended1Field;
    {
        int getFirstBaseFieldMethod() {
            return firstExtended1Field;
        }

        void setFirstBaseFieldMethod(int firstFormalParam) {
            this.firstExtended1Field = firstFormalParam;
        }
    }
}

class ExtendedExtendedClass1 extends ExtendedClass1 {

}

class NestedClassLevel1 {
    BaseClass baseClassArray[];
    {
        void initialize()
            ExtendedClass0 classInstance0;
            ExtendedExtendedClass1 classInstance1;
        {
            baseClassArray = new BaseClass[4];
            baseClassArray[0] = new BaseClass;

            classInstance0 = new ExtendedClass0;

            baseClassArray[1] = classInstance0;

            baseClassArray[2] = new ExtendedClass1;

            classInstance1 = new ExtendedExtendedClass1;
            classInstance1.firstBaseField = 10;
            classInstance1.firstExtended1Field = 2;
            baseClassArray[3] = classInstance1;

            baseClassArray[1].firstBaseField = 8;
            classInstance0.firstExtended0Field = 4;

            print(classInstance0.mulBaseFirstField());
        }
    }
}

class NestedClassLevel0 {
    NestedClassLevel1 nestedClassLevel1;

    {
        void initialize() {
            nestedClassLevel1 = new NestedClassLevel1;
            nestedClassLevel1.initialize();
        }
    }
}

class NestingClass {
    NestedClassLevel0 nestedClassLevel0;

    {
        void initialize() {
            nestedClassLevel0 = new NestedClassLevel0;
            nestedClassLevel0.initialize();
        }
    }
}


{

    void main()
        NestingClass nestingClassLocalArray[];
        int arrayBaseSize;
        int arraySize;
        int arrayCnt;
    {
        arrayBaseSize = 2;
        arraySize = twoConst * arrayBaseSize;

        // Allocate array of 4 Nesting classes
        nestingClassLocalArray = new NestingClass[arraySize];

        arrayCnt = 0;

        do {
            nestingClassLocalArray[arrayCnt] = new NestingClass;
            nestingClassLocalArray[arrayCnt].initialize();
            arrayCnt++;
        } while (arrayCnt < arraySize);

        nestingClassLocalArray[1].nestedClassLevel0.nestedClassLevel1.baseClassArray[3].setFirstBaseFieldMethod(5);
        print(nestingClassLocalArray[1].nestedClassLevel0.nestedClassLevel1.baseClassArray[3].getFirstBaseFieldMethod());
        print(nestingClassLocalArray[1].nestedClassLevel0.nestedClassLevel1.baseClassArray[3].firstBaseField);
    }
}

